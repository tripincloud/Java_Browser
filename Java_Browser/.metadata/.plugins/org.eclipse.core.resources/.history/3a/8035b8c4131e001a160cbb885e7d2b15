import java.util.HashMap;
import java.util.LinkedHashMap;
import core.*;

import java.io.FileNotFoundException;
import java.io.IOException;
	
import indexation.*;
public class TestInterrogation {
	public static void main(String[] args) throws FileNotFoundException, IOException {
		Index i = Index.deserialize("CISIserialize");
		String query = "What problems and concerns are there in making up descriptive titles?\n" + 
				"What difficulties are involved in automatically retrieving articles from\n" + 
				"approximate titles?\n" + 
				"What is the usual relevance of the content of articles to their titles?";
		Weighter w_TF = new WeighterTF(i);
		Weighter w_TFIDF = new WeighterTF(i);
		IRMode1 modB = new Boolean(i);
		IRMode1 modCart = new VectorialCos(i,w_TFIDF);
		HashMap<String, Integer> queryProcessed = modB.getQueryProcessed(query);
		/*System.out.println(i.getTfsForDoc("2300"));
		
		System.out.println("Les id des documents contenants le mot young avec son occurence\n");
		System.out.println(i.getTfsForStem("computer_aid")+"\n");
		System.out.println("Les id des documents contenants le mot attempt avec son occurence\n");
		System.out.println(i.getTfsForStem("attempt")+"\n");
		
		for (String doc : i.getDocs().keySet()) {	
			if (i.getTfsForDoc(doc).containsKey("computer_aid") && i.getTfsForDoc(doc).containsKey("young"))
				System.out.println(doc);
		}
		*/
		LinkedHashMap<String, Double> res = modCart.runMode1(query);
	
		Document[] docN = new Document[res.size()];
		
		int indice=0;
		for (String id : modCart.runMode1(query).keySet()){
			docN[indice]=i.getDoc(id);
			indice++;
		}
		Requete q1 = new Requete("12");
		Evaluation e1 = new Evaluation(docN, q1, 10);
		for (Document d : docN) 
			System.out.println(d.getId().equals("1890"));	
	}
}
